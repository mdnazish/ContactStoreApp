package com.mn.contactstore.dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.mn.contactstore.domain.Contact;
import com.mn.contactstore.rowmapper.ContactRowMapper;

/**
 * @author Md Nazish
 *
 */
@Repository("contactDao")
public class ContactDaoImpl extends AbstractBaseDao implements ContactDao {

	@Override
	public boolean addContact(Contact contact) {
		String sqlQuery = "INSERT INTO contact(user_id, name, phone, email, address, remark) VALUES(:userId, :name, :phone, :email, :address, :remark)";

		if (contact != null) {
			// Bind the value for these named parameter
			Map map = new HashMap();
			map.put("userId", contact.getUserId());
			map.put("name", contact.getName());
			map.put("phone", contact.getPhone());
			map.put("email", contact.getEmail());
			map.put("address", contact.getAddress());
			map.put("remark", contact.getRemark());

			// now bind the values which auto-incremented and generated by the DB
			KeyHolder keyHolder = new GeneratedKeyHolder();

			// from where, all values for the named parameter is supplied
			SqlParameterSource paramValue = new MapSqlParameterSource(map);

			// execute the query with named parameters and keyHolder
			super.getNamedParameterJdbcTemplate().update(sqlQuery, paramValue, keyHolder);

			// get contactId from KeyHolder and set to the Contact
			contact.setContactId(keyHolder.getKey().intValue());
			return true;

		} else {
			return false;
		}
	}

	@Override
	public Contact getContactById(Integer contactId) {
		String sql = "SELECT contact_id, user_id, name, phone, email, address, remark FROM contact WHERE contact_id=?";

		// Use queryForObject(-,-,-) method tO fetch single record from DB
		return getJdbcTemplate().queryForObject(sql, new ContactRowMapper(), contactId);
	}

	@Override
	public boolean updateContact(Contact contact) {
		String sqlQuery = "UPDATE contact SET name=:name, phone=:phone, email=:email, address=:address, remark=:remark WHERE contact_id=:contactId";

		if (contact != null) {
			Map map = new HashMap();
			map.put("contactId", contact.getContactId());
			map.put("name", contact.getName());
			map.put("phone", contact.getPhone());
			map.put("email", contact.getEmail());
			map.put("address", contact.getAddress());
			map.put("remark", contact.getRemark());

			getNamedParameterJdbcTemplate().update(sqlQuery, map);
			return true;

		} else {
			return false;
		}
	}

	@Override
	public boolean deleteContact(Contact contact) {
		this.deleteContactrById(contact.getContactId());
		return true;
	}

	@Override
	public boolean deleteContactrById(Integer contactId) {
		String sqlQuery = "DELETE FROM contact WHERE contact_id=?";
		getJdbcTemplate().update(sqlQuery, contactId);
		return true;
	}

	@Override
	public List<Contact> findAll() {
		String sqlQuery = "SELECT contact_id, user_id, name, phone, email, address, remark FROM contact";

		// Use query(-,-) method to fetch all record from DB
		return getJdbcTemplate().query(sqlQuery, new ContactRowMapper());
	}

	@Override
	public List<Contact> findByProperty(String propName, Object propValue) {
		String sqlQuery = "SELECT contact_id, user_id, name, phone, email, address, remark FROM contact WHERE "
				+ propName + "=?";

		return getJdbcTemplate().query(sqlQuery, new ContactRowMapper(), propValue);
	}

}
